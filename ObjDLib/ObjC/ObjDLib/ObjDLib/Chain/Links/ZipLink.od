package objd.chain

class ZipLink<T, A, R>(val a : Iterable<A>, val f : (T, A) -> R) extends ChainLink<T, R> {
    override def build(yield : Yield<R>) : Yield<T> = {
        val ai = a.iterator
        Yield.decorate<T>(
            base = yield,
            yield = item -> {
                if(!ai.hasNext) Go.Break
                else yield.yield(f(item, ai.next))
            }
        )
    }
}

class Zip3Link<T, A, B, R>(val a : Iterable<A>, val b : Iterable<B>, val f : (T, A, B) -> R) extends ChainLink<T, R> {
    override def build(yield : Yield<R>) : Yield<T> = {
        val ai = a.iterator
        val bi = b.iterator
        Yield.decorate<T>(
            base = yield,
            yield = item -> {
                if(!ai.hasNext || !bi.hasNext) Go.Break
                else yield.yield(f(item, ai.next, bi.next))
            }
        )
    }
}