package objd.collection

stub class ImHashSet<T> extends ImSet<T> {
    override def mCopy : MHashSet<T>
}

stub class MHashSet<T> extends MSet<T> {
    override def im : ImHashSet<T>
    override def imCopy : ImHashSet<T>
}

stub class Array<T> extends Seq<T> {
    override def for(each : T -> void)
    override def go(on : T -> Go) : Go
}

stub class ImArray<T> extends Array<T> with ImSeq<T>  {
    static def apply<T>(mArray : MArray) : [T]
    override def mCopy : MArray<T>

    override def add(item : T) : [T]
    override def add(seq : Seq<T>) : [T]
    override def sub(item : T) : [T]
    override def tail : [T]
}
stub class MArray<T> extends Array<T> with MSeq<T> {
    static def apply<T>(capacity : uint) : MArray<T>
    override def im : [T]
    override def imCopy : [T]
}

@Java
stub trait HashMap<K, V> extends Map<K, V>


@ObjC
stub trait HashMap<K, V> extends Map<K, V> {
    override def for(each : ((K, V)) -> void)
    override def go(on : ((K, V)) -> Go) : Go
}

@Java
stub class ImHashMap<K, V> extends ImMap<K, V> with HashMap<K, V> {
    override def mCopy : MHashMap<K, V>
}

@ObjC
stub class ImHashMap<K, V> extends ImMap<K, V> with HashMap<K, V> {
    override def mCopy : MHashMap<K, V>
    override def for(each : ((K, V)) -> void)
    override def go(on : ((K, V)) -> Go) : Go
}

@Java
stub class MHashMap<K, V> extends MMap<K, V> with HashMap<K, V> {
    override def im : ImHashMap<K, V>
    override def imCopy : ImHashMap<K, V>
}

@ObjC
stub class MHashMap<K, V> extends MMap<K, V> with HashMap<K, V> {
    override def im : ImHashMap<K, V>
    override def imCopy : ImHashMap<K, V>
    override def for(each : ((K, V)) -> void)
    override def go(on : ((K, V)) -> Go) : Go
}
