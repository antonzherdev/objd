package objd.concurrent

stub class Lock {
    def lock
    def unlock
    def tryLock : bool

    inline def locked<T>(f : () -> T) : T = {
        lock
        val ret = f()
        unlock
        ret
    }

    def newCondition : LockCondition
}

stub class LockCondition {
    def await
    def unlockedAwait

    def await(period : float4) : bool
    def unlockedAwait(period : float4) : bool

    def signal //Signal when the lock is locked
    def signalAndUnlock //Signal when the lock is locked and unlock
    def unlockedSignal //Signal when the lock is NOT locked
}