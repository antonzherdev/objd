package objd.lang

abstract class Try<T> {
    def get : T
    def reason : any
    def value : T?

    def isSuccess : bool
    def isFailure : bool = !isSuccess

    def map<R>(f : T -> R) : Try<R>
}

final class Success<T>(override val get : T) extends Try<T> {
    override def value : T? = get
    override def isSuccess : bool = true
    override def isFailure : bool = false

    override def reason : any = throw "Getting reason for success try"
    override def map<R>(f : T -> R) : Try<R> = Success<R>(f(get))
}

final class Failure<T>(override val reason : any) extends Try<T> {
    override def value : T? = nil
    override def get : T = throw "Getting failure try: $reason"
    override def isSuccess : bool = false
    override def isFailure : bool = true
    override def map<R>(f : T -> R) : Try<R> = self.cast<Try<R>>
}
