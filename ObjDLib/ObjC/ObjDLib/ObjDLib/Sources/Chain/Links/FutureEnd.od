package objd.chain

class FutureEnd<T> {
    private val _promise = Promise<[T]>()
    private var _stopped : bool = false
    private var _counter : AtomicInt = AtomicInt()
    private volatile var _ended : bool = false
    private var _yielded = AtomicBool()
    private var _array : MArray<T>?

    def future : Future<[T]> = _promise

    def yield : Yield<Future<T>> = {
        var _i = 0
        volatile var _set = -1
        Yield.make<Future<T>>(
            begin = size -> {
                _array = MArray<T>(capacity = size)
                Go.Continue
            },
            yield = fut -> {
                if(!_stopped) {
                    _counter.incrementAndGet
                    _array.get.append(nil)
                    val i = _i
                    _i++
                    fut.onComplete {tr ->
                        if(!_stopped) {
                            if(tr.isFailure) {
                                _stopped = true
                                _promise.failure(tr)
                            } else if(!_stopped) {
                                _array.get.set(index = i, tr.get)
                                _set = i
                                val r = _counter.decrementAndGet
                                if(_ended && r == 0) {
                                    if(!_yielded.getAndSet(true)) {
                                        _promise.success(_array.get.im)
                                    }
                                }
                            }
                        }
                    }
                }
                if(_stopped) Go.Break else Go.Continue
            },
            end = res -> {
                _ended = true
                if(_counter.intValue == 0) {
                    if(!_yielded.getAndSet(true)) {
                        _promise.success(_array.get.im)
                    }
                }
                res
            }
        )
    }
}

class FutureVoidEnd {
    private val _promise = Promise<void>()
    private var _stopped : bool = false
    private var _counter : AtomicInt = AtomicInt()
    private volatile var _ended : bool = false
    private var _yielded = AtomicBool()

    def future : Future<void> = _promise

    def yield : Yield<Future<void>> = Yield.make<Future<void>>(
        begin = size -> {
            Go.Continue
        },
        yield = fut -> {
            if(!_stopped) {
                _counter.incrementAndGet
                fut.onComplete {tr ->
                if(!_stopped) {
                    if(tr.isFailure) {
                        _stopped = true
                        _promise.failure(tr)
                    } else if(!_stopped) {
                        val r = _counter.decrementAndGet
                        if(_ended && r == 0) {
                            if(!_yielded.getAndSet(true)) {
                                _promise.success(nil)
                            }
                        }
                    }
                }
                }
            }
            if(_stopped) Go.Break else Go.Continue
        },
        end = res -> {
            var ret = res
            _ended = true
            if(_counter.intValue == 0) {
                if(!_yielded.getAndSet(true)) {
                    _promise.success(nil)
                }
            }
            ret
        }
    )
}