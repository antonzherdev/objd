package objd.collection

case class Pair<T>(val a : T, val b : T) extends ImSet<T> {
    override inline def contains(item : T) : bool = a == item || b == item
    override def count : uint = 2
    override def iterator : Iterator<T> = PairIterator<T>(self)
    override def head : T? = a
    def isEqual(pair : Pair<T>) : bool = contains(pair.a) && contains(pair.b)
    override def hash : uint = (a.hash + b.hash)*7 + 13
}

class PairIterator<T>(val pair : Pair<T>) extends Iterator<T> {
    private var state : int = 0
    override def hasNext : bool = state < 2
    override def next : T = {
        state++
        if(state == 1) pair.a
        else pair.b
    }
}