package core.chain

trait Iterator<T> {
   def hasNext : bool
   def next : T
}

trait MIterator<T> extends Iterator<T> {
    def remove
    def set(value : T)
}

trait Builder<T, C extends Traversable<T>> {
    def append(item : T)
    def build : C
    def appendAll(items : Traversable<T>) {
        items.for(append(_))
    }
}


trait Traversable<T> {
    def for(each : T -> void) {
        go{item ->
            each(item)
            true
        }
    }

    def parFor(each : T -> void) {
        go{item ->
            DispatchQueue.default.async{
                each(item)
            }
            true
        }
    }

    def go(on : T -> bool) : bool

    def chain : Chain<T> = {
        Chain.chainWith<T>(self)
    }

    def find(where : T -> bool) : T? = {
        var ret : T? = nil
        go{x ->
            if(where(x)) {
                ret = x
                false
            } else true
        }
        ret
    }

    def exists(where : T -> bool) : bool = {
        var ret = false
        go{x ->
            if(where(x)) {
                ret = true
                false
            } else true
        }
        ret
    }

    def all(confirm : T -> bool) : bool = {
        var ret = true
        go{x ->
            if(!confirm(x)) {
                ret = false
                false
            } else true
        }
        ret
    }

    def head : T? = {
        var ret : T?
        go{on ->
            ret = on
            false
        }
        ret
    }

    def convertWith<C extends Traversable<T>>(builder : Builder<T, C>) : C = {
        for(x -> builder.append(x))
        builder.build
    }
}

trait ImTraversable<T> extends Traversable<T> {
    def mCopy : MTraversable<T> = {
        val arr = MArray<T>()
        for{item -> arr.append(item)}
        arr
    }
}

trait MTraversable<T> extends Traversable<T> {
    def append(item : T)
    def remove(item : T) : bool
    def clear

    def im : ImTraversable<T> = imCopy
    def imCopy : ImTraversable<T> = {
        val arr = MArray<T>()
        for{item -> arr.append(item)}
        arr.im
    }
}

trait Iterable<T> extends Traversable<T> {
    def count : uint = {
        val i = iterator
        var n : uint = 0
        while(i.hasNext) {
            i.next
            n++
        }
        n
    }
    def iterator : Iterator<T>

    override def head : T? = if(isEmpty) nil else iterator.next
    def isEmpty : bool = !iterator.hasNext

    override def for(each : T -> void) {
        val i = iterator
        while(i.hasNext) each(i.next)
    }

    override def parFor(each : T -> void) {
        val i = iterator
        while(i.hasNext) {
            val v = i.next
            DispatchQueue.default.async{
                each(v)
            }
        }
    }

    override def go(on : T -> bool) : bool = {
        val i = iterator
        while(i.hasNext) if(!on(i.next)) return false
        true
    }

    def contains(item : T) : bool = {
        val i = iterator
        while(i.hasNext) if(i.next == i) return true
        false
    }

    override def description : string = {
        chain.toStringWith(start = "[", delimiter = ", ", end = "]")
    }

    override def hash : uint = {
        var ret : uint = 13
        val i = iterator
        while(i.hasNext) {
            ret = ret*31 + i.next.hash
        }
        ret
    }
}

trait ImIterable<T> extends Iterable<T> with ImTraversable<T> {
    override def mCopy : MIterable<T> = {
        val arr = MArray<T>()
        for{item -> arr.append(item)}
        arr
    }
}
trait MIterable<T> extends Iterable<T> with MTraversable<T> {
    def mutableIterator : MIterator<T>

    override def remove(item : T) : bool = {
        val i = mutableIterator
        var ret = false
        while(i.hasNext) {
            if(i.next == item) {
                i.remove
                ret = true
            }
        }
        ret
    }

    def mutableFilter(by : T -> bool) {
        val i = mutableIterator
        while(i.hasNext) {
            if(by(i.next)) i.remove
        }
    }

    override def im : ImIterable<T> = imCopy
    override def imCopy : ImIterable<T> = {
        val arr = MArray<T>()
        for{item -> arr.append(item)}
        arr.im
    }
}

class IterableF<T>(iteratorF : () -> Iterator<T>) extends ImIterable<T> {
    override def iterator = iteratorF()
}

class EmptyIterator<T> extends Iterator<T> {
    static val instance = EmptyIterator<any>()
    override def hasNext : bool = false
    override def next : T = throw "Iterator is empty"
}