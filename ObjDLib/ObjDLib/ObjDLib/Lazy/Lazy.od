package core.chain

class Lazy<T>(f : () -> T) {
    private var _value : T
    private var _calculated = false
    def isCalculated : bool =  _calculated
    def get : T =
        if(_calculated) _value
        else {
            _value = f()
            _calculated = true
            _value
        }
}


class Cache<X, F>(f : X -> F) {
    private var _lastX : X
    private var _lastF : F

    def apply(x : X) : F =
        if(x == _lastX) _lastF
        else {
            _lastX = x
            _lastF = f(x)
            _lastF
        }
}


class Weak<T>(weak get : T) {

}