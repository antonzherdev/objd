package objd.concurrent

stub trait Locking {
    inline def locked<T>(f : () -> T) : T = {
        lock
        val ret = f()
        unlock
        ret
    }
    inline def lockedProc<T>(f : () -> void) : void = {
        lock
        f()
        unlock
    }

    def lock
    def unlock
    def tryLock : bool
}

@ObjC
@GenName("NSLock")
stub class Lock extends Locking

@Java
stub class Lock extends Locking


@ObjC
@GenName("NSConditionLock")
stub class ConditionLock(condition : int) extends Locking {
    def tryLockWhen(condition : int) : bool
    def lockWhen(condition : int)
    def lockWhen(condition : int, period : float) : bool
    def unlockWith(condition : int)
}


@Java
stub class ConditionLock(condition : int) extends Locking {
    def tryLockWhen(condition : int) : bool
    def lockWhen(condition : int)
    def lockWhen(condition : int, period : float) : bool
    def unlockWith(condition : int)
}

