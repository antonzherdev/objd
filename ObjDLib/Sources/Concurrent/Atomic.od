package objd.concurrent

import java.util.concurrent.atomic._

@ObjC
stub class AtomicBool {
    def boolValue : bool
    def set(newValue : bool)
    def getAndSet(newValue : bool) : bool
    def compareAndSet(oldValue : bool, newValue : bool) : bool
}

@ObjC
stub class AtomicInt {
    def intValue : int4
    def set(newValue : int4)
    def incrementAndGet : int4
    def decrementAndGet : int4
    def addAndGet(value : int4) : int4
    def compareAndSet(oldValue : int4, newValue : int4) : bool
}

@ObjC
stub class AtomicObject<T>(value : T) {
    def value : T
    def set(newValue : T)
    def compareAndSet(oldValue : T, newValue : T) : bool
}

@Java
class AtomicObject<T>(value : T) extends AtomicReference<T>(value) {
    inline def value : T = get
}

@Java
class AtomicInt extends AtomicInteger
@Java
class AtomicBool extends AtomicBoolean
