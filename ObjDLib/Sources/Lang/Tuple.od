package objd.lang

final case class Tuple<A, B>(val a : A, val b : B) extends Comparable<Tuple<A, B>> {
    override def compare(to : Tuple<A, B>) : int = {
        val r = to.a.cast<Comparable<A>>.compare(a)
        if(r == 0) -to.b.cast<Comparable<B>>.compare(b) else -r
    }

    override def description = "($a, $b)"
    static def unapply<A, B>(tuple : Tuple<A, B>) : Tuple<A, B>? = tuple
}

final case class Tuple3<A, B, C>(val a : A, val b : B, val c : C) extends Comparable<Tuple3<A, B, C>> {
    override def compare(to : Tuple3<A, B, C>) : int = {
        var r = to.a.cast<Comparable<A>>.compare(a)
        if(r == 0) {
            r = to.b.cast<Comparable<B>>.compare(b)
            if(r == 0) -to.c.cast<Comparable<C>>.compare(c) else -r
        } else -r
    }
    override def description = "($a, $b, $c)"
    static def unapply<A, B, C>(tuple : Tuple3<A, B, C>) : Tuple3<A, B, C>? = tuple
}

final case class Tuple4<A, B, C, D>(val a : A, val b : B, val c : C, val d : D) extends Comparable<Tuple4<A, B, C, D>> {
    override def compare(to : Tuple4<A, B, C, D>) : int = {
        var r = to.a.cast<Comparable<A>>.compare(a)
        if(r == 0) {
            r = to.b.cast<Comparable<B>>.compare(b)
            if(r == 0) {
                r = to.c.cast<Comparable<C>>.compare(c)
                if(r == 0) -to.d.cast<Comparable<D>>.compare(d) else -r
            } else -r
        } else -r
    }

    override def description = "($a, $b, $c, $d)"
    static def unapply<A, B, C, D>(tuple : Tuple4<A, B, C, D>) : Tuple4<A, B, C, D>? = tuple
}

final case class Tuple5<A, B, C, D, E>(val a : A, val b : B, val c : C, val d : D, val e : E) extends Comparable<Tuple5<A, B, C, D, E>> {
    override def compare(to : Tuple5<A, B, C, D, E>) : int = {
        var r = to.a.cast<Comparable<A>>.compare(a)
        if(r == 0) {
            r = to.b.cast<Comparable<B>>.compare(b)
            if(r == 0) {
                r = to.c.cast<Comparable<C>>.compare(c)
                if(r == 0) {
                    r = to.d.cast<Comparable<D>>.compare(d)
                    if(r == 0) -to.e.cast<Comparable<E>>.compare(e) else -r
                } else -r
            } else -r
        } else -r
    }

    override def description = "($a, $b, $c, $d, $e)"
    static def unapply<A, B, C, D, E>(tuple : Tuple5<A, B, C, D, E>) : Tuple5<A, B, C, D, E>? = tuple
}